// Sizes
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    .btn#{$infix}-1 {
      @include button-size($btn-padding-y-xs, $btn-padding-x-xs, $btn-font-size-xs, $btn-line-height-xs, $btn-border-radius-xs);
    }
    .btn#{$infix}-2 {
      @include button-size($btn-padding-y-sm, $btn-padding-x-sm, $btn-font-size-sm, $btn-line-height-sm, $btn-border-radius-sm);
    }
    .btn#{$infix}-3 {
      @include button-size($btn-padding-y, $btn-padding-x, $btn-font-size, $btn-line-height, $btn-border-radius);
    }
    .btn#{$infix}-4 {
      @include button-size($btn-padding-y-lg, $btn-padding-x-lg, $btn-font-size-lg, $btn-line-height-lg, $btn-border-radius-lg);
    }
    .btn#{$infix}-5 {
      @include button-size($btn-padding-y-xl, $btn-padding-x-xl, $btn-font-size-xl, $btn-line-height-xl, $btn-border-radius-xl);
    }
  }
}

// Link
.btn-outline-link {
  @include button-outline-variant($link-color);
  border-color: $gray-400;
}

// Custom
@each $color, $value in $custom-colors {
  .btn-#{$color} {
    @include button-variant($value, $value);
    @if $color == 'orange' {
      color: $white;
    }
  }
  .btn-outline-#{$color} {
    @if $color != 'white' {
      @include button-outline-variant($value, $white);
    } @else {
      @include button-outline-variant($value);
    }
  }
}

// State
@each $color, $value in $theme-colors {
  .btn-state-#{$color} {
    @include button-state-variant($value);
  }
}
@each $color, $value in map-remove($custom-colors, "black", "white") {
  .btn-state-#{$color} {
    @include button-state-variant($value);
  }
}

// 3D
@each $color, $value in $theme-colors {
  .btn-3d-#{$color} {
    @include button-3d-variant($value, $value);
    @if $color == 'warning' {
      &,
      &:hover,
      &:focus {
        color: $white;
      }
    }
  }
}
@each $color, $value in map-remove($custom-colors, "black", "white") {
  .btn-3d-#{$color} {
    @include button-3d-variant($value, $value);
    @if $color == 'orange' {
      color: $white;
    }
  }
}

// Opacity
@if $enable-opacity {
  @for $alpha from 1 through 9 {
    @each $color, $value in $theme-colors {
      .btn-#{$color}-#{($alpha * 10)} {
        @include button-variant(rgba($value, ($alpha * .1)), transparent);
        @if $color == 'warning' {
          &,
          &:hover,
          &:focus {
            color: $white;
          }
        }
      }
    }
    @each $color, $value in $custom-colors {
      .btn-#{$color}-#{($alpha * 10)} {
        @include button-variant(rgba($value, ($alpha * .1)), transparent);
        @if $color == 'orange' {
          color: $white;
        }
      }
    }
  }
}

// Circle
.btn-circle {
  border-radius: $border-radius-circle;
  padding: 0;
  line-height: normal;
  overflow: hidden;

  @include button-circle-size($btn-font-size);

  @each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
      $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

      &.btn#{$infix}-1 {
        @include button-circle-size($btn-font-size-xs);
      }
      &.btn#{$infix}-2 {
        @include button-circle-size($btn-font-size-sm);
      }
      &.btn#{$infix}-3 {
        @include button-circle-size($btn-font-size);
      }
      &.btn#{$infix}-4 {
        @include button-circle-size($btn-font-size-lg);
      }
      &.btn#{$infix}-5 {
        @include button-circle-size($btn-font-size-xl);
      }
    }
  }
}

// Pill
.btn-pill {
  border-radius: $rounded-pill;
}

// Responsive block
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    .btn#{$infix}-block {
      display: block;
      width: 100%;
    }
  }
}

