// Responsive block
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    .btn#{$infix}-block {
      display: block;
      width: 100%;
    }
  }
}

// Sizes
.btn-xs {
  @include button-size($input-btn-padding-y-xs, $input-btn-padding-x-xs, $input-btn-font-size-xs, $input-btn-line-height-xs, $btn-border-radius-xs);
}
.btn-xl {
  @include button-size($input-btn-padding-y-xl, $input-btn-padding-x-xl, $font-size-xl, $line-height-xl, $btn-border-radius-xl);
}

// Link
.btn-outline-link {
  @include button-outline-variant($link-color);
  border-color: $gray-400;
}

// Custom
@each $color, $value in $custom-colors {
  .btn-#{$color} {
    @include button-variant($value, $value);
    @if $color == 'orange' {
      color: $white;
    }
  }
  .btn-outline-#{$color} {
    @if $color != 'white' {
      @include button-outline-variant($value, $white);
    } @else {
      @include button-outline-variant($value);
    }
  }
}

// State
@each $color, $value in $theme-colors {
  .btn-state-#{$color} {
    @include button-state-variant($value);
  }
}
@each $color, $value in map-remove($custom-colors, "black", "white") {
  .btn-state-#{$color} {
    @include button-state-variant($value);
  }
}

// 3D
@each $color, $value in $theme-colors {
  .btn-3d-#{$color} {
    @include button-3d-variant($value, $value);
    @if $color == 'warning' {
      &,
      &:hover,
      &:focus {
        color: $white;
      }
    }
  }
}
@each $color, $value in map-remove($custom-colors, "black", "white") {
  .btn-3d-#{$color} {
    @include button-3d-variant($value, $value);
    @if $color == 'orange' {
      color: $white;
    }
  }
}

// Opacity
@for $alpha from 1 through 9 {
  @each $color, $value in $theme-colors {
    .btn-#{$color}-#{($alpha * 10)} {
      @include button-variant(rgba($value, ($alpha * .1)), transparent);
      @if $color == 'warning' {
        &,
        &:hover,
        &:focus {
          color: $white;
        }
      }
    }
  }
  @each $color, $value in $custom-colors {
    .btn-#{$color}-#{($alpha * 10)} {
      @include button-variant(rgba($value, ($alpha * .1)), transparent);
      @if $color == 'orange' {
        color: $white;
      }
    }
  }
}

// Circle
.btn-circle {
  border-radius: $border-radius-circle;
  padding: 0;
  line-height: normal;
  overflow: hidden;

  @include button-circle-size($font-size-base);

  &.btn-xs {
    @include button-circle-size($font-size-xs);
  }
  &.btn-sm {
    @include button-circle-size($font-size-sm);
  }
  &.btn-lg {
    @include button-circle-size($font-size-lg);
  }
  &.btn-xl {
    @include button-circle-size($font-size-xl);
  }
}

// Pill
.btn-pill {
  border-radius: $rounded-pill;
}
