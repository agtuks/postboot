// Responsive
@each $breakpoint in map-keys($grid-breakpoints) {
  @if $breakpoint != 'xs' {
    @include media-breakpoint-up($breakpoint) {
      $infix: breakpoint-infix($breakpoint);

      .border#{$infix} { border: $border-width solid $border-color !important; }
      @each $position in $position-properties {
        .border#{$infix}-#{$position} { border-#{$position}: $border-width solid $border-color !important; }
      }
    }
  }
}

// Custom
@each $color, $value in map-remove($custom-colors, "white") {
  .border-#{$color} {
    border-color: $value !important;
  }
}

// Opacity
@if $enable-opacity {
  @for $alpha from 1 through 9 {
    @each $color, $value in $theme-colors {
      .border-#{$color}-#{($alpha * 10)} {
        border-color: rgba($value, ($alpha * .1)) !important;
      }
    }
    @each $color, $value in $custom-colors {
      .border-#{$color}-#{($alpha * 10)} {
        border-color: rgba($value, ($alpha * .1)) !important;
      }
    }
  }
}

// Hover
@each $color, $value in $theme-colors {
  .border-hover-#{$color} {
    @include hover-focus {
      border-color: $value !important;
    }
  }

  @if $enable-opacity {
    @for $alpha from 1 through 9 {
      .border-hover-#{$color}-#{($alpha * 10)} {
        @include hover-focus {
          border-color: rgba($value, ($alpha * .1)) !important;
        }
      }
    }
  }
}
@each $color, $value in $custom-colors {
  .border-hover-#{$color} {
    @include hover-focus {
      border-color: $value !important;
    }
  }

  @if $enable-opacity {
    @for $alpha from 1 through 9 {
      .border-hover-#{$color}-#{($alpha * 10)} {
        @include hover-focus {
          border-color: rgba($value, ($alpha * .1)) !important;
        }
      }
    }
  }
}

// Style
@each $style, $value in $border-styles {
  .border-#{$style} { border-style: $value !important; }

  @each $position in $position-properties {
    .border-#{$position}-#{$style} { border-#{$position}-style: $value !important; }
  }
}

// Width
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint);

    @if $breakpoint != 'xs' {
      .border#{$infix}-0 { border-width: 0 !important; }

      @each $position in $position-properties {
        .border-#{$position}#{$infix}-0 { border-#{$position}-width: 0 !important; }
      }
    }

    @for $width from 1 through $border-widths {
      .border#{$infix}-#{$width} { border-width: #{$width}px !important; }

      @each $position in $position-properties {
        .border-#{$position}#{$infix}-#{$width} { border-#{$position}-width: #{$width}px !important; }
      }
    }
  }
}

// Rounded
.rounded-top-pill {
  border-top-left-radius: $rounded-pill !important;
  border-top-right-radius: $rounded-pill !important;
}
.rounded-right-pill {
  border-top-right-radius: $rounded-pill !important;
  border-bottom-right-radius: $rounded-pill !important;
}
.rounded-bottom-pill {
  border-bottom-right-radius: $rounded-pill !important;
  border-bottom-left-radius: $rounded-pill !important;
}
.rounded-left-pill {
  border-top-left-radius: $rounded-pill !important;
  border-bottom-left-radius: $rounded-pill !important;
}

.rounded-top-0 {
  border-top-left-radius: 0 !important;
  border-top-right-radius: 0 !important;
}
.rounded-right-0 {
  border-top-right-radius: 0 !important;
  border-bottom-right-radius: 0 !important;
}
.rounded-bottom-0 {
  border-bottom-right-radius: 0 !important;
  border-bottom-left-radius: 0 !important;
}
.rounded-left-0 {
  border-top-left-radius: 0 !important;
  border-bottom-left-radius: 0 !important;
}
