// Custom
@each $color, $value in map-remove($custom-colors, "white") {
  .border-#{$color} {
    border-color: $value !important;
  }
}

// Opacity
@for $alpha from 1 through 9 {
  @each $color, $value in $theme-colors {
    .border-#{$color}-#{($alpha * 10)} {
      border-color: rgba($value, ($alpha * .1)) !important;
    }
  }
  @each $color, $value in $custom-colors {
    .border-#{$color}-#{($alpha * 10)} {
      border-color: rgba($value, ($alpha * .1)) !important;
    }
  }
}

// Hover
@each $color, $value in $theme-colors {
  .border-hover-#{$color} {
    @include hover-focus {
      border-color: $value !important;
    }
  }

  @for $alpha from 1 through 9 {
    .border-hover-#{$color}-#{($alpha * 10)} {
      @include hover-focus {
        border-color: rgba($value, ($alpha * .1)) !important;
      }
    }
  }
}
@each $color, $value in $custom-colors {
  .border-hover-#{$color} {
    @include hover-focus {
      border-color: $value !important;
    }
  }

  @for $alpha from 1 through 9 {
    .border-hover-#{$color}-#{($alpha * 10)} {
      @include hover-focus {
        border-color: rgba($value, ($alpha * .1)) !important;
      }
    }
  }
}

// Style
@each $style, $value in $border-styles {
  .border-#{$style} { border-style: $value !important; }

  @each $position in $positions {
    .border-#{$position}-#{$style} { border-#{$position}-style: $value !important; }
  }
}

// Width
@for $width from 1 through $border-widths {
  .border-#{$width} { border-width: #{$width}px !important; }

  @each $position in $positions {
    .border-#{$position}-#{$width} { border-#{$position}-width: #{$width}px !important; }
  }
}
